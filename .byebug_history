exit
continue
render json: {error: 'Invalid login'}
continue
user
exit
Auth.issue({user: user.email})
Auth.issue({user.email})
user.email
user
Auth.issue(user.email)
user.issue
Auth
user.auth
user
exit
params
user_params
exit
user_params
params
exit
params
exit
user_params
exit
user_params
params
exit
user_params
params
exit
user_params
params
user_params
params
exit
user_params
params
exit
user_params
params
exit
params
user_params
exit
params
user_params
exit
params
exit
params
exit
user.save
 user = User.new(user_params)
user_params
exit
user_params
exit
user
user.save
user = User.new(user_params)
user_params
exit
user_params
exit
params[:user]
params
user_params
params[:user]
exit
params[:user]
params
exit
params
user_params
params
exit
user_params
params
exit
params
params[:user]
params
exit
params
user_params
params
exit
params
exit
self.params
self.hi
self
params
user_params
params
exit
params
exit
params
exit
params
exit
params
user_params
exit
user_params
params
user_params
continue
exit
signed_in?
signed_in
exit
current_user
continue
ENV["AUTH_SECRET"]
ENV
auth_secret
JWT.encode(payload, auth_secret, ALGORITHM)
payload
exit
user_params
user
user.errors
continue
user
exit
user.errors
user = User.create(user_params)
exit
params
