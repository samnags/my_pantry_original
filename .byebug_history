exit
pantry.ingredients
pantry = Pantry.find(params[:id])
Pantry.find(params[:id])
exit
current_user.pantries
current_user
exit
current_user.pantries
pantry.save
pantry.user = current_user
pantry.user
pantry.valid?
pantry.valid
pantry.user
pantry
exit
Pantry.create(params[:pantry])
Pantry.new
params[:pantry]
params
current_user
exit
signed_in?
signed_in??
current_user
request.env["HTTP_AUTHORIZATION"]
exit
params
exit
current_user
continue
JWT.decode(token, auth_secret, true, { algorithm: ALGORITHM })
continue
current_user
user_id
uuser_id
jwt
user = User.find(params[:id])
params
continue
JWT.decode(token, auth_secret, true, { algorithm: ALGORITHM }).first
JWT.decode(token, auth_secret, true, { algorithm: ALGORITHM })
continue
request.env["HTTP_AUTHORIZATION"]
continue
render json: {jwt: jwt, user: { id: user.id, email: user.email} }
user.id
user
jwt
exit
request.env["HTTP_AUTHORIZATION"].present?
exit
exi
continue
request.env["HTTP_AUTHORIZATION"]
continue
JWT.decode(token, auth_secret, true, { :algorithm => 'HS256' })
JWT.decode(token, auth_secret, true, { :algorithm => 'HS256' }
ALGORITHM
ALGORITHIM
algorithim
auth_secret
token
continue
Auth.decode(request.env["HTTP_AUTHORIZATION"])
(Auth.decode(request.env["HTTP_AUTHORIZATION"])
request.env["HTTP_AUTHORIZATION"]
request.env["HTTP_AUTHORIZATION"])[0]
(request.env["HTTP_AUTHORIZATION"])["user_id"]
request.env["HTTP_AUTHORIZATION"])["user_id"]
request.env["HTTP_AUTHORIZATION"].present?
request.env["HTTP_AUTHORIZATION"]
continue
JWT.decode(token, auth_secret, true, { algorithm: ALGORITHM })
JWT.decode(token, auth_secret, true, { algorithm: ALGORITHM }).first
JWT.decode token, auth_secret, true, { :algorithm => 'HS256' }
JWT.decode token, hmac_secret, true, { :algorithm => 'HS256' }
auth_secret
token
ALGORITHM
JWT.decode(token, auth_secret, true, { :algorithm => 'HS256' })
JWT.decode(token, auth_secret, true, { :algorithm => ALGORITHM })
JWT.decode(token, auth_secret, true, { ALGORITHM })
JWT.decode(token, auth_secret, true, { :algorithm => ALGORITHM })
JWT.decode(token, auth_secret, true, { :algoirthm => ALGORITHM })
JWT.decode(token, auth_secret, true, { algorithm: ALGORITHM })
ALGORITHM
algorithim
auth_secret
token
continue
request.env["HTTP_AUTHORIZATION"]
continue
!!current_user
continue
request.env["HTTP_AUTHORIZATION"].present?
equest.env["HTTP_AUTHORIZATION"].present?
continue
request.env["HTTP_AUTHORIZATION"].present?
request.env["HTTP_AUTHORIZATION"]["user_id"]
request.env["HTTP_AUTHORIZATION"]
continue
request.env["HTTP_AUTHORIZATION"]
continue
User.all
request.env
request.env["HTTP_AUTHORIZATION"]
request.env["HTTP_AUTHORIZATION"].present?
request.env["HTTP_AUTHORIZATION"]
self
exit
continue
render json: {error: 'Invalid login'}
continue
user
exit
Auth.issue({user: user.email})
Auth.issue({user.email})
user.email
user
Auth.issue(user.email)
user.issue
Auth
user.auth
user
exit
params
user_params
exit
user_params
params
exit
params
exit
user_params
exit
user_params
params
exit
user_params
params
exit
user_params
params
user_params
params
exit
user_params
params
exit
user_params
params
exit
params
user_params
exit
params
user_params
exit
params
exit
params
exit
user.save
 user = User.new(user_params)
user_params
exit
user_params
exit
user
user.save
user = User.new(user_params)
user_params
exit
user_params
exit
params[:user]
params
user_params
params[:user]
exit
params[:user]
params
exit
params
user_params
params
exit
user_params
params
exit
params
params[:user]
params
exit
params
user_params
params
exit
params
exit
self.params
self.hi
self
params
user_params
params
exit
params
exit
params
exit
params
exit
params
user_params
exit
user_params
params
user_params
continue
exit
signed_in?
signed_in
exit
current_user
continue
ENV["AUTH_SECRET"]
ENV
auth_secret
JWT.encode(payload, auth_secret, ALGORITHM)
payload
exit
user_params
user
user.errors
continue
user
exit
user.errors
user = User.create(user_params)
exit
params
