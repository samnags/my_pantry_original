exit
render json: { ingredients: pi }
pi = pantry.ingredients
render json: { ingredients: pantry }
render json: { ingredients: ingredients }
pantry = Pantry.find(params[:id])
pantry.ingredients
sam.ingredients
pantry = Pantry.find(params[:id])
params
continue
ing.ingredient.category
ing.ingredient
ing.category
ing.valid?
ing.valid
ing
exit
ingredient.category = Category.find_by(name: params[:pantryingredient][:category])
ingredient.category = Category.find(name: params[:pantryingredient][:category])
ingredient
exit
iexit
Ingredient.find_or_create_by(name: params[:pantryingredient][:ingredient])
params[:pantryingredient]
continue
ing.save
ing
ing.quantity = quantity_params
inging.quantity = quantity_params
ing.quantity = params[:pantryingredient][:quantity].to_i
params[:pantryingredient][:quantity].to_i
ing
ing.quantity = 4
ing.quantity
ing
ing.quanity = quantity_params
inq.quanity = quantity_params
ing
ing.ingredient = ingredient_params
ing.measurement_id = measurement_params.id
ing.measurement.id = measurement_params.id
ing.measurement = measurement_params
continue
ing
ing.measurement_id = 4
ing.measurement_id
ing.measurement.id = 4
ing.measurement.id=
ing.measurement.id
ing.measurement
ing.measurement = 4
ing.measurement
ing.measurement = measurement_params.id
measurement_params.id
measurement_params
ing.measurement = measurement_params
PantryIngredient
measurement_params
ing.measurement
continue
ing
continue
exit
ing
PantryIngredient
Measurement
ing.measurement = Measurement.find_by(name: "Cup")
ing.measurement = Measurement.find(name: "Cup")
ing.measurement
ing
ing.measurement = Measurement.find_or_create_by(name: params[:pantryingredient][:measurement])
ing.measurement
ing
ing.quantity = params[:pantryingredient][:quantity].to_i
ing
ing.quantity = params[:pantryingredient][:quantity]
ing.quantity = params.require(:pantryingredient).permit(:quantity)
params.require(:pantryingredient).permit(:quantity)
ing
continue
Ingredient.find_or_create_by(name: params[:pantryingredient][:ingredient])
params[:pantryingredient][:ingredient]
continue
Measurement.find_or_create_by(name: params[:pantryingredient][:measurement])
ing
img
continue
Measurement.find_or_create_by(name: params[:pantryingredient][:measurement])
Measurement.all
params[:pantryingredient][:measurement]
params[:pantryingredient]
continue
fish
fish.save
fish = Ingredient.new(name: "Fish")
fish = _
Ingredient.new(name: "Fish")
Ingredient.all
Ingredient
params
Measurement.find(name: params[:pantryingredient][:measurement])
new
exit
Measurement.all
Measurement
Measurement.all
cup
Measurement.all
Measurement.find(name: 'Cup')
cup.save
cup = Measurement.new(name: 'Cup')
cup = _
Measurement.new(name: 'Cup')
Measurement
Measurement.all
params[:pantryingredient][:currentPantry]
new.pantry
new
exit
params["pantryingredient"]
PantryIngredient
params["pantryingredient"]
params
continue
params["pantryingredient"]
params[pantryingredient]
params
exit
pantry.ingredients
pantry = Pantry.find(params[:id])
Pantry.find(params[:id])
exit
current_user.pantries
current_user
exit
current_user.pantries
pantry.save
pantry.user = current_user
pantry.user
pantry.valid?
pantry.valid
pantry.user
pantry
exit
Pantry.create(params[:pantry])
Pantry.new
params[:pantry]
params
current_user
exit
signed_in?
signed_in??
current_user
request.env["HTTP_AUTHORIZATION"]
exit
params
exit
current_user
continue
JWT.decode(token, auth_secret, true, { algorithm: ALGORITHM })
continue
current_user
user_id
uuser_id
jwt
user = User.find(params[:id])
params
continue
JWT.decode(token, auth_secret, true, { algorithm: ALGORITHM }).first
JWT.decode(token, auth_secret, true, { algorithm: ALGORITHM })
continue
request.env["HTTP_AUTHORIZATION"]
continue
render json: {jwt: jwt, user: { id: user.id, email: user.email} }
user.id
user
jwt
exit
request.env["HTTP_AUTHORIZATION"].present?
exit
exi
continue
request.env["HTTP_AUTHORIZATION"]
continue
JWT.decode(token, auth_secret, true, { :algorithm => 'HS256' })
JWT.decode(token, auth_secret, true, { :algorithm => 'HS256' }
ALGORITHM
ALGORITHIM
algorithim
auth_secret
token
continue
Auth.decode(request.env["HTTP_AUTHORIZATION"])
(Auth.decode(request.env["HTTP_AUTHORIZATION"])
request.env["HTTP_AUTHORIZATION"]
request.env["HTTP_AUTHORIZATION"])[0]
(request.env["HTTP_AUTHORIZATION"])["user_id"]
request.env["HTTP_AUTHORIZATION"])["user_id"]
request.env["HTTP_AUTHORIZATION"].present?
request.env["HTTP_AUTHORIZATION"]
continue
JWT.decode(token, auth_secret, true, { algorithm: ALGORITHM })
JWT.decode(token, auth_secret, true, { algorithm: ALGORITHM }).first
JWT.decode token, auth_secret, true, { :algorithm => 'HS256' }
JWT.decode token, hmac_secret, true, { :algorithm => 'HS256' }
auth_secret
token
ALGORITHM
JWT.decode(token, auth_secret, true, { :algorithm => 'HS256' })
JWT.decode(token, auth_secret, true, { :algorithm => ALGORITHM })
JWT.decode(token, auth_secret, true, { ALGORITHM })
JWT.decode(token, auth_secret, true, { :algorithm => ALGORITHM })
JWT.decode(token, auth_secret, true, { :algoirthm => ALGORITHM })
JWT.decode(token, auth_secret, true, { algorithm: ALGORITHM })
ALGORITHM
algorithim
auth_secret
token
continue
request.env["HTTP_AUTHORIZATION"]
continue
!!current_user
continue
request.env["HTTP_AUTHORIZATION"].present?
equest.env["HTTP_AUTHORIZATION"].present?
continue
request.env["HTTP_AUTHORIZATION"].present?
request.env["HTTP_AUTHORIZATION"]["user_id"]
request.env["HTTP_AUTHORIZATION"]
continue
request.env["HTTP_AUTHORIZATION"]
continue
User.all
request.env
request.env["HTTP_AUTHORIZATION"]
request.env["HTTP_AUTHORIZATION"].present?
request.env["HTTP_AUTHORIZATION"]
self
exit
continue
render json: {error: 'Invalid login'}
continue
user
exit
Auth.issue({user: user.email})
Auth.issue({user.email})
user.email
user
Auth.issue(user.email)
user.issue
Auth
user.auth
user
exit
params
